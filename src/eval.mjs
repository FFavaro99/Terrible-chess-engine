
const pieceValues = [
    0,          //EMPTY SQUARE
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,          //WHITE PAWN
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 100, 100, 100, 100, 100, 100, 100, 100, 0,
        0, 120, 120, 120, 120, 120, 120, 120, 120, 0,
        0, 100, 100, 100, 110, 110, 100, 100, 100, 0,
        0, 100, 100, 110, 115, 115, 110, 100, 100, 0,
        0, 100, 100, 110, 115, 115, 110, 100, 100, 0,
        0, 100, 100, 100, 110, 110, 100, 100, 100, 0,
        0, 100, 100, 100, 100, 100, 100, 100, 100, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ],                                          //white bishop
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 290, 295, 295, 295, 295, 295, 295, 290, 0,
        0, 295, 295, 300, 300, 300, 300, 295, 295, 0,
        0, 295, 300, 300, 305, 305, 300, 300, 295, 0,
        0, 295, 300, 305, 310, 310, 305, 300, 295, 0,
        0, 295, 300, 305, 310, 310, 305, 300, 295, 0,
        0, 295, 300, 300, 305, 305, 300, 300, 295, 0,
        0, 295, 295, 300, 300, 300, 300, 295, 295, 0,
        0, 290, 295, 295, 295, 295, 295, 295, 290, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
    ],                                    
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,          //white knight
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 280, 290, 290, 290, 290, 290, 290, 280, 0,
        0, 290, 300, 300, 300, 300, 300, 300, 290, 0,
        0, 290, 300, 300, 310, 310, 300, 300, 290, 0,
        0, 290, 300, 310, 320, 320, 310, 300, 290, 0,
        0, 290, 300, 310, 320, 320, 310, 300, 290, 0,
        0, 290, 300, 300, 310, 310, 300, 300, 290, 0,
        0, 290, 300, 300, 300, 300, 300, 300, 290, 0,
        0, 280, 290, 290, 290, 290, 290, 290, 280, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ],           
    500,                                    //white rook
    [                                       //white queen
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 880, 890, 890, 890, 890, 890, 890, 880, 0,
        0, 890, 900, 900, 900, 900, 900, 900, 890, 0,
        0, 890, 900, 900, 910, 910, 900, 900, 890, 0,
        0, 890, 900, 910, 920, 920, 910, 900, 890, 0,
        0, 890, 900, 910, 920, 920, 910, 900, 890, 0,
        0, 890, 900, 900, 910, 910, 900, 900, 890, 0,
        0, 890, 900, 900, 900, 900, 900, 900, 890, 0,
        0, 880, 890, 890, 890, 890, 890, 890, 880, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    ],                                   
    10000,                                  //white king
    [ 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -100, -100, -100, -100, -100, -100, -100, -100, 0,
        0, -100, -100, -100, -110, -110, -100, -100, -100, 0,
        0, -100, -100, -110, -115, -115, -110, -100, -100, 0,
        0, -100, -100, -110, -115, -115, -110, -100, -100, 0,
        0, -100, -100, -100, -110, -110, -100, -100, -100, 0,
        0, -120, -120, -120, -120, -120, -120, -120, -120, 0,
        0, -100, -100, -100, -100, -100, -100, -100, -100, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, -290, -295, -295, -295, -295, -295, -295, -290, 0,
        0, -295, -295, -300, -300, -300, -300, -295, -295, 0,
        0, -295, -300, -300, -305, -305, -300, -300, -295, 0,
        0, -295, -300, -305, -310, -310, -305, -300, -295, 0,
        0, -295, -300, -305, -310, -310, -305, -300, -295, 0,
        0, -295, -300, -300, -305, -305, -300, -300, -295, 0,
        0, -295, -295, -300, -300, -300, -300, -295, -295, 0,
        0, -290, -295, -295, -295, -295, -295, -295, -290, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
    ],     
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,          //black knight
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -280, -290, -290, -290, -290, -290, -290, -280, 0,
        0, -290, -300, -300, -300, -300, -300, -300, -290, 0,
        0, -290, -300, -300, -310, -310, -300, -300, -290, 0,
        0, -290, -300, -310, -320, -320, -310, -300, -290, 0,
        0, -290, -300, -310, -320, -320, -310, -300, -290, 0,
        0, -290, -300, -300, -310, -310, -300, -300, -290, 0,
        0, -290, -300, -300, -300, -300, -300, -300, -290, 0,
        0, -280, -290, -290, -290, -290, -290, -290, -280, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ], 
    -500,
    [                                       //black queen
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, -880, -890, -890, -890, -890, -890, -890, -880, 0,
        0, -890, -900, -900, -900, -900, -900, -900, -890, 0,
        0, -890, -900, -900, -910, -910, -900, -900, -890, 0,
        0, -890, -900, -910, -920, -920, -910, -900, -890, 0,
        0, -890, -900, -910, -920, -920, -910, -900, -890, 0,
        0, -890, -900, -900, -910, -910, -900, -900, -890, 0,
        0, -890, -900, -900, -900, -900, -900, -900, -890, 0,
        0, -880, -890, -890, -890, -890, -890, -890, -880, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    ],   
    -10000,
    0];

const evaluateBoard = (board, sideToMove) => {

    let sum = 0;
    switch(sideToMove){
        case 0:{
            sum = 30;
            break;
        }
        case 1: {
            sum = -30;
            break;
        }
    }
    let wDevPieces = 0;
    let bDevPieces = 0;

    let wBishops = 0;
    let bBishops = 0;

    let wFreeRooks = 2;
    let bFreeRooks = 2;
    for (let i = 0; i < board.length; i++) {
        let piece = board[i];

        //Bishop pair
        switch(piece){          
            case 2:
                wBishops++;
                break;
            case 8:
                bBishops++;
                break;
        }


        //Normal Piece Value
        if (typeof pieceValues[piece] != 'object'){
            sum += pieceValues[piece];
        }
        else {
            let valueArray = pieceValues[piece];
            sum += valueArray[i];
        }

        //Dev pieces count
        if (i > 40 && i < 79) {
            switch(piece){
                case 2:
                case 3:
                case 4:
                case 5:{
                    wDevPieces++;
                    break;
                }
                    
                case 8:
                case 9:
                case 10:
                case 11:{
                    bDevPieces++;
                    break;
                }     
            }
        }

        //Check rook on free/semi column
        switch (piece) {
            case 4: {
                let j = i;
                while (j < 99) {
                    j+=10;
                }
                while (j > 20) {
                    if (board[j] === 1){
                        wFreeRooks--;
                    }
                    j-=10;
                }
                break;
            }
            case 9: {
                let j = i;
                while (j < 99) {
                    j+=10;
                }
                while (j > 20) {
                    if (board[j] === 6){
                        bFreeRooks--;
                    }
                    j-=10;
                }
                break;
            }
        }

        //Check bishop not obstructed

        //Check pawn chains

        //Check isolated pawns
    }
    let devPiecesPoints = (wDevPieces - bDevPieces) * 20;
    let bishopPair = (wBishops - bBishops) * 50;
    let freeRooks = (wFreeRooks - bFreeRooks) * 50;
    sum += devPiecesPoints;
    sum += bishopPair;
    sum += freeRooks;
    return sum;
}

export default evaluateBoard;